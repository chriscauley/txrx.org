# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2017-04-19 13:52
from __future__ import unicode_literals

import colorful.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import media.models
import tool.models
import wmd.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('thing', '0002_auto_20170419_1223'),
        ('event', '0002_auto_20170419_1223'),
        ('geo', '0002_auto_20170419_1223'),
        ('media', '0002_auto_20170419_1223'),
        ('redtape', '0002_auto_20170419_1223'),
        ('course', '0002_auto_20170419_1223'),
    ]

    operations = [
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(default=tool.models.new_key, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='CheckoutItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('room', models.ForeignKey(help_text=b'Only rooms marked "has checkoutitems" appear here', on_delete=django.db.models.deletion.CASCADE, to='geo.Room')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('courses', models.ManyToManyField(blank=True, help_text=b'If a user enrolls in any of these classes and then is marked "complete", this criteria will be granted to that user.', to='course.Course')),
                ('documents', models.ManyToManyField(blank=True, to='redtape.Document')),
                ('events', models.ManyToManyField(blank=True, help_text=b'If a user RSVPs for any of these events and then is marked "complete", this criteria will be granted to that user.', to='event.Event')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DoorGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.TextField(help_text=b'List all the doors this can open.')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('color', colorful.fields.RGBColorField()),
                ('column', models.IntegerField(choices=[(0, b'left'), (1, b'right')])),
                ('row', models.IntegerField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32)),
                ('date', models.DateField()),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=99999)),
                ('name', models.CharField(max_length=128)),
                ('description', wmd.models.MarkDownField(blank=True, null=True)),
                ('photo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='media.Photo')),
            ],
            options={
                'ordering': ('order',),
            },
            bases=(media.models.PhotosMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('abbreviation', models.CharField(help_text=b'For badge.', max_length=16)),
                ('order', models.IntegerField(default=999)),
                ('criteria', models.ManyToManyField(blank=True, help_text=b'Requires all these criteria to access these tools.', to='tool.Criterion')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tool.Group')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geo.Room')),
            ],
            options={
                'ordering': ('group', 'order'),
            },
        ),
        migrations.CreateModel(
            name='PermissionSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Permission')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dow', models.IntegerField(choices=[(0, b'Su'), (1, b'Mo'), (2, b'Tu'), (3, b'We'), (4, b'Th'), (5, b'Fr'), (6, b'Sa')])),
                ('start', models.CharField(default=b'1000', max_length=4)),
                ('end', models.CharField(default=b'2200', max_length=4)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Schedule')),
            ],
            options={
                'ordering': ('dow',),
            },
        ),
        migrations.CreateModel(
            name='TaggedTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField()),
                ('order', models.IntegerField(default=9999)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=99999)),
                ('name', models.CharField(max_length=128)),
                ('make', models.CharField(blank=True, max_length=64, null=True)),
                ('model', models.CharField(blank=True, max_length=32, null=True)),
                ('description', wmd.models.MarkDownField(blank=True, null=True)),
                ('est_price', models.FloatField(blank=True, null=True)),
                ('functional', models.BooleanField(default=True)),
                ('repair_date', models.DateField(blank=True, null=True)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Lab')),
                ('materials', models.ManyToManyField(blank=True, to='thing.Material')),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tool.Permission')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='geo.Room')),
            ],
            options={
                'ordering': ('lab', 'order'),
            },
            bases=(media.models.PhotosMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ToolCheckoutItemGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('checkoutitems', models.ManyToManyField(to='tool.CheckoutItem')),
                ('tools', models.ManyToManyField(to='tool.Tool')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ToolLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=99999)),
                ('title', models.CharField(max_length=64)),
                ('url', models.URLField()),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Tool')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='UserCriterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.IntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Criterion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='taggedtool',
            name='tool',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Tool'),
        ),
        migrations.AddField(
            model_name='permissionschedule',
            name='schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tool.Schedule'),
        ),
    ]
